<div class="container">
    <h1 class="margin-y text-center">パズルゲーム</h1>
  <div class="d-lg-flex justify-content-center">
    <section class="d-flex flex-column justify-content-between text-center">
      <div>
        <%= image_tag @post.post_image, id: "sample-image" ,class: "card-img-top rounded-0 fit-image aspect-square", style: "width: 200px; height:200px; border:solid"%>
        <div>
          <%= link_to "画像を変更", posts_path, class: 'btn btn-primary w-75 my-3' %>
        </div>
      </div>
      <div class="w-75 mx-auto">
        <table class="table table-bordered mb-0" style="border-width: 2px; border-color:black">
          <tbody>
            <tr>
              <td class="border-dark text-center">難易度</td>
            </tr>
            <tr>
              <td class="border-dark text-center p-0">
                <select id="range" class="form-select form-select-lg p-2 rounded-0 fit-width">
                  <% for range in 3..10 do %>
                  <option value="<%= range %>"><%= range %></option>
                  <% end %>
                </select>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div>
        <button id="puzzle_reset" class="btn btn-success w-75 margin-y">RESET</button>
      </div>
    </section>

    <div class="mx-lg-5 relative-box">
      <div id="puzzle"></div>
      <div id="puzzle-complete" class="absolute-center-box my-4 w-100" style="display: block">
        <%= image_tag 'congrats_image.png', class: "w-100"%>
      </div>
    </div>

    <div class="d-flex align-items-end mx-auto mx-lg-0 mt-4 mt-lg-0" style="width:200px">
      <table class="table table-bordered mb-0" style="border-width: 2px; border-color:black">
        <tbody>
          <tr>
            <td class="border-dark text-center">操作回数</td>
          </tr>
          <tr>
            <td id="puzzle_move" class="border-dark text-center">0回</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
<p class="text-center my-3">パズルについて：画像の最右下が空欄となります。</p>

<script>
// レスポンシブ対応
function resizePuzzle(){
  BrowserSize = document.body.clientWidth;
  const range = parseInt($("#range").val());
  if (BrowserSize <= 815){
    var parentSize = BrowserSize*0.75;
    var parentBlock = document.getElementById("parentBlock");
    parentBlock.style.width = Math.floor(parentSize/range)*range+borderWidth*2+"px"
    parentBlock.style.height = Math.floor(parentSize/range)*range+borderWidth*2+"px"
    for (var cnt1=0; cnt1<H; cnt1++) {
      for (var cnt2=0; cnt2<W; cnt2++) {
        if (blankId != cnt1+"_"+cnt2) {
          var puzzlePiece = document.getElementById("block"+cnt1+"_"+cnt2);
          puzzlePiece.style.width = Math.floor(parentSize/range)+"px"
          puzzlePiece.style.height = Math.floor(parentSize/range)+"px"
          puzzlePiece.style.top = Math.floor(parentSize/range)*cnt1+"px"
          puzzlePiece.style.left = Math.floor(parentSize/range)*cnt2+"px"
        }
      }
    }
  }
}

// 操作回数をカウント
function clickCount() {
  let puzzle_move = document.getElementById("puzzle_move");
  puzzle_move.innerHTML = `${move_counter}回`;
}

// パズル完成チェック（戻り値無し、completed変更可能性あり）
function is_complete() {
  var tempComplete = true;
  for (var cnt1=0; cnt1<H; cnt1++) {
    for (var cnt2=0; cnt2<W; cnt2++) {
      var puzzlePiece = document.getElementById("block"+cnt1+"_"+cnt2);
      if (puzzlePiece == null){
        continue;
      }
      if (puzzlePiece.id != ("block"+puzzlePiece.dataset.imageId)){
        tempComplete = false;
        break;
      }
    }
    if (tempComplete == false){
      break;
    }
  }
  completed = tempComplete;
}

// パズルの外枠を設置（戻り値無し）
function setOutLine() {
  parentBlock = document.createElement("div");
  document.querySelector("#puzzle").appendChild(parentBlock);
  parentBlock.id = "parentBlock";
  parentBlock.style.width  = parentWidth+"px";
  parentBlock.style.height = parentHeight+"px";
  parentBlock.style.position = "relative";
  parentBlock.style.border = "solid "+borderWidth+"px";
  parentBlock.style.margin = "auto";
}

/*
配列をランダムに並び替えて取得する
* パラメーター：配列（並び替え前）
* 戻り値：配列（並び替え後）
*/
function getRandamArray(arr) {
  for (var cnt=arr.length-1; cnt>=0; cnt--) {
    var rnd = Math.floor(Math.random()*(cnt+1));
    var tmp = arr[cnt];
    arr[cnt] = arr[rnd];
    arr[rnd] = tmp;
  }
  return arr;
}

/*
ブロックをクリックする
* パラメーター：オブジェクト イベントハンドラ
*/
function clickEv(ev) {
  ev.stopPropagation();
  if (completed){
    return;
  }
  moveBlock(ev.target)
}

/*
ブロックを移動させる
* パラメーター：オブジェクト コンポーネント
*/
function moveBlock(comp) {
  // クリックしたブロックの隣に「空きスペース」があるかを判定する
  // 動かすブロック、空きスペースの情報を取得
  var moveId = comp.id.replace("block","")    // 動かすブロックID
  var moveId0 = moveId.split("_")[0];         // 動かすブロックの行ID
  var moveId1 = moveId.split("_")[1];         // 動かすブロックの列ID
  var blankId0 = blankId.split("_")[0];       // 空きスペースの行ID
  var blankId1 = blankId.split("_")[1];       // 空きスペースの列ID

  var moveFlg = false;    // 判定フラグ
  if (moveId0 == blankId0) {
    if (Math.abs(moveId1-blankId1) == 1) {  // 動かすブロックと空きスペースが隣り合ってる
      moveFlg = true;
    }
  } else if (moveId1 == blankId1) {
    if (Math.abs(moveId0-blankId0) == 1) {  // 動かすブロックと空きスペースが隣り合ってる
      moveFlg = true;
    }
  }

  // 移動可能な場合、クリックしたブロックを空きスペースに移動させる
  // moveFlg = true //この記述を入れると、隣り合わせでなくても移動できる。パズル完成時のチェック用チート。
  if (moveFlg) {
    // クリックしたスペースIDと空白スペースIDを入れ替える
    var _moveId = moveId;
    moveId = blankId;
    blankId = _moveId;
    // ブロックの位置を入れ替える
    comp.style.top = parseInt(comp.style.height)*blankId0+"px";
    comp.style.left  = parseInt(comp.style.width)*blankId1+"px";
    comp.id = "block"+blankId0+"_"+blankId1;
    move_counter += 1;
    clickCount();
    is_complete()
    if (completed) {
      document.getElementById("puzzle-complete").style.display = "block";
    }
  }
}

/*
ブロックを移動させる
* パラメーター：文字列 画像URL
*/
function setImage(url, callback) {
  if (!completed) {
    document.getElementById("puzzle-complete").style.display = "none";
  }

  $("#range_box").css("display","block");     // スライダーバーを表示させる
  $(parentBlock).empty();                     // ブロック要素をすべて消す
  $("#url").val("");

  // ブロックIDの格納用配列の初期化
  var blockIdArr = new Array();
  blockIdArr.length = 0;

  // パズルの空の位置をランダムで決める
  var rnd = Math.floor(Math.random()*((W*H)-1));
  var counter = 0;
  for (var cnt1=0; cnt1<H; cnt1++) {
      for (var cnt2=0; cnt2<W; cnt2++) {
          blockIdArr[counter] = cnt1+"_"+cnt2;
          counter++;
      }
  }

  // 確率でランダムがそのまま完成だった場合、再度シャッフルする。
  var blockIdArrRandom = blockIdArr.concat();
  blockIdArrRandom = getRandamArray(blockIdArrRandom);
  function array_equal(blockIdArr, blockIdArrRandom) {
    if (!Array.isArray(blockIdArr))    return false;
    if (!Array.isArray(blockIdArrRandom))    return false;
    if (blockIdArr.length != blockIdArr.length) return false;
    for (var i = 0, n = blockIdArr.length; i < n; ++i) {
      if (blockIdArr[i] !== blockIdArrRandom[i]) return false;
    }
    return true;
  }
  var checkArray = array_equal(blockIdArr, blockIdArrRandom)
  while (checkArray) {
    blockIdArrRandom = getRandamArray(blockIdArrRandom);
    checkArray = array_equal(blockIdArr, blockIdArrRandom);
  };
  blockIdArr = blockIdArrRandom;

  //パズル完成後、クリックしても動けないようにするため
  var counter = 0
  for (var cnt1=0; cnt1<H; cnt1++) {
    for (var cnt2=0; cnt2<W; cnt2++) {
      if (blockIdArr[counter] == `${H-1}_${W-1}`) {
        blankId = cnt1+"_"+cnt2;
      }
      counter++;
    }
  }

  // 画像を読み込ませる
  imgObj = new Image();
  imgObj.src = url;
  imgObj.onload = function() {
    var counter = 0;

    // ブロックごとに順番に画像を配置する
    for (var cnt1=0; cnt1<H; cnt1++) {
      for (var cnt2=0; cnt2<W; cnt2++) {
        if (blankId != cnt1+"_"+cnt2) {

          // canvas：パズルピースを生成する
          var canvas = document.createElement("canvas");
          canvas.dataset.imageId = blockIdArr[counter];
          canvas.id = "block"+cnt1+"_"+cnt2;
          canvas.width  = parentWidth/W;
          canvas.height = parentHeight/H;
          parentBlock.appendChild(canvas);

          // canvas：パズルピースを配置する
          canvas.style.position = "absolute";
          canvas.style.width  = Math.floor(parentWidth/W)+"px";
          canvas.style.height = Math.floor(parentHeight/H)+"px";
          canvas.style.top  = canvas.height*cnt1+"px";
          canvas.style.left = canvas.width*cnt2+"px";

          //ブロックをランダムに並び替えて配置する
          //画像をつぶれないように使用幅を短い方に合わせる（縦横比が別の場合）
          var imgDim = imgObj.width/W;
          if (imgDim > imgObj.height/H) {
            imgDim = imgObj.height/H;
          }
          // ランダム配列のblockIdArrを基にパズル位置を決める
          // IDの0～2を基に画像サイズ・位置を決める
          var rand1 = blockIdArr[counter].split("_")[1];
          var rand2 =  blockIdArr[counter].split("_")[0];

          // canvas要素内にあるdrawImageメソッドの値の取得
          var sx = imgDim*rand1;
          var sy = imgDim*rand2;
          var sw = imgDim;
          var sh = imgDim;
          var dx = 0;
          var dy = 0;
          var dw = canvas.width;
          var dh = canvas.height;

          // canvas要素を2D用にする（使用メソッドが変化する）
          // 枠線の太さ
          var context = canvas.getContext("2d");
          context.lineWidth = 1;

          // 画像を配置
          context.drawImage(imgObj,sx,sy,sw,sh,dx,dy,dw,dh);
          context.beginPath();
          context.strokeRect(0, 0, dw, dh);
          canvas.addEventListener("click", clickEv, true);
        }
        counter++;
      }
    }
    // 小数の影響による外枠の大きさの微調整
    $("#parentBlock").css("width", Math.floor((canvas.width)*W)+borderWidth*2+"px");
    $("#parentBlock").css("height", Math.floor((canvas.height)*H)+borderWidth*2+"px");
    if(callback != null){
      callback();
    }
  }
}

//外枠の幅・高さ(px)
var parentWidth  = 600;
var parentHeight = 600;

// パズルの枠と入力部品エリアの幅を合わせる（見た目の調整）
$("#settingBlock").css("width", parentWidth+"px");

/** 初期値 **/
var W = 3;  // 横の個数
var H = 3;  // 縦の個数

var blankId;            // 空きスペースID
var parentBlock;        // 外枠のdiv要素
var imgObj;             // 画像オブジェクト
var completed = false;  // パズル完成チェック
var move_counter = 0;  //操作回数
var borderWidth = 2;   //borderのpx値

// パズルの外枠を設置する
setOutLine();

setImage($('#sample-image').attr('src'), resizePuzzle);

// セレクトフォームから初期値の変更をした場合
$("#range").on("change",function(){
  W = parseInt(this.value);
  H = parseInt(this.value);
  completed = false;
  move_counter = 0;
  clickCount();
  setImage(imgObj.src, resizePuzzle);
});

// RESETボタンが押された場合
$("#puzzle_reset").on("click",function(){
  completed = false;
  move_counter = 0;
  clickCount();
  setImage($('#sample-image').attr('src'), resizePuzzle);
});

window.onresize = resizePuzzle;

var windowWidth = $(window).width();
var windowResponsive = 991;
if (windowWidth <= windowResponsive) {
  $('#puzzle-complete').removeClass("absolute-center-box");
} else {
  $('#puzzle-complete').addClass("absolute-center-box");
}

window.addEventListener('resize', function(){
  windowWidth = $(window).width();
  if (windowWidth <= windowResponsive) {
    $('#puzzle-complete').removeClass("absolute-center-box");
  } else {
    $('#puzzle-complete').addClass("absolute-center-box");
  }
});
</script>