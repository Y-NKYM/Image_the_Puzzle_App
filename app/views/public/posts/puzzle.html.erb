<div class="container">
    <h1 class="margin-y text-center">パズルゲーム</h1>
  <div class="row justify-content-center">
    <section class="d-flex flex-column justify-content-between text-center col">
      <div>
        <%= image_tag @post.post_image, id: "sample-image" ,class: "card-img-top rounded-0 fit-image aspect-square", style: "width: 200px; height:200px; border:solid"%>
        <div>
          <%= link_to "画像を変更", posts_path, class: 'btn btn-primary w-75 my-3' %>
        </div>
      </div>
      <div class="w-75 mx-auto">
        <table class="table table-bordered mb-0" style="border-width: 2px; border-color:black">
          <tbody>
            <tr>
              <td class="border-dark text-center">難易度</td>
            </tr>
            <tr>
              <td class="border-dark text-center p-0">
                <select id="range" class="form-select form-select-lg p-2 rounded-0 fit-width">
                  <% for range in 3..10 do %>
                  <option value="<%= range %>"><%= range %></option>
                  <% end %>
                </select>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div>
        <button id="puzzle_reset" class="btn btn-success w-75 margin-y">RESET</button>
      </div>
    </section>
    <div class="relative-box">
      <div class="mx-5" id="puzzle" style="border:solid;"></div>
      <div id="puzzle-complete" class="absolute-center-box" style="display: none">
        <%= image_tag 'congrats_image.png'%>
      </div>
    </div>
    <div class="d-flex align-items-end col" style="width:200px">
      <table class="table table-bordered mb-0" style="border-width: 2px; border-color:black">
        <tbody>
          <tr>
            <td class="border-dark text-center">操作回数</td>
          </tr>
          <tr>
            <td id="puzzle_move" class="border-dark text-center">0回</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
<p class="text-center my-3">パズルについて：画像の最右下が空欄となります。</p>

<script>
  var completed = false;
  function is_complete() {
    var tempComplete = true;
    for (var cnt1=0; cnt1<H; cnt1++) {
        for (var cnt2=0; cnt2<W; cnt2++) {
            var canvas_element = document.getElementById("block"+cnt1+"_"+cnt2);
            if (canvas_element == null){
                continue;
            }
            if (canvas_element.id != ("block"+canvas_element.dataset.imageId)){
                tempComplete = false;
                break;
            }
        }
        if (tempComplete == false){
          break;
        }
    }
    completed = tempComplete;
  }

  if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) {
    var parentWidth  = 256;     // 外枠の幅  （px）
    var parentHeight = 256;   // 外枠の高さ（px）
  } else {
    var parentWidth  = 600;     // 外枠の幅  （px）
    var parentHeight = 600;     // 外枠の高さ（px）
  }

  $("#settingBlock").css("width", parentWidth+"px");  // パズルの枠と入力部品エリアの幅を合わせる（見た目の調整）

  setOutLine();   // パズルの外枠を設置する(1)

  /** 初期値 **/
  var W = 3;  // 横の個数
  var H = 3;  // 縦の個数

  var blankId;            // 空きスペースID
  var parentBlock;        // 外枠のdiv要素
  var imgObj;             // 画像オブジェクト


  /**
   * 1. パズルの外枠を設置する
   **/
   function setOutLine() {
      parentBlock = document.createElement("div");
      document.querySelector("#puzzle").appendChild(parentBlock);
      parentBlock.id = "parentBlock";
      parentBlock.style.width  = parentWidth+"px";
      parentBlock.style.height = parentHeight+"px";
      parentBlock.style.position = "relative";
      // parentBlock.style.border = "2px solid #000000";
      // parentBlock.style.border = "2px solid #000000";

  }


  //** イメージを読み込む **//
  // $("#urlBtn").on("click",function(){
      // setImage($('#url').val());
  setImage($('#sample-image').attr('src'));

  // while (completed){
  //   completed = false;
  //   setImage($('#sample-image').attr('src'));
  //   is_complete();
  // }
  // });

  //** スライダーバーを動かす **//
  $("#range").on("change",function(){
      W = parseInt(this.value);
      H = parseInt(this.value);
      completed = false;
      setImage(imgObj.src);
      // document.getElementById('output1').value=this.value;
  });
  // $("#range_h").on("change",function(){
  //     H = this.value;
  //     setImage(imgObj.src);
  //     document.getElementById('output2').value=this.value;
  // });

  $("#puzzle_reset").on("click",function(){
    completed = false;
      setImage($('#sample-image').attr('src'));
  });



  /**
   * 配列をランダムに並び替えて取得する
   * @param   {Array} arr  並び替える前の配列
   * @return  {Array}      並び替えた配列
   **/
  function getRandamArray(arr) {
      for (var cnt=arr.length-1; cnt>=0; cnt--) {
          var rnd = Math.floor(Math.random()*(cnt+1));
          var tmp = arr[cnt];
          arr[cnt] = arr[rnd];
          arr[rnd] = tmp;
      }
      // console.log(arr);
      return arr;
  }



  /**
   * ブロックをクリックする
   * @param {object} ev    イベントハンドラ
   **/
   var move_counter = 0;
   function clickEv(ev) {
      ev.stopPropagation();
      if (completed){
        return;
      }
      moveBlock(ev.target)
  }

  /**
   * 4. ブロックを移動させる
   * @param {object} comp    コンポーネント
   **/

   function moveBlock(comp) {


      // (4-1)クリックしたブロックの隣に「空きスペース」があるかを判定する
      // 動かすブロック、空きスペースの情報を取得
      //** (4-1) start **/
      var moveId = comp.id.replace("block","")    // 動かすブロックID
      var moveId0 = moveId.split("_")[0];     // 動かすブロックの行ID
      var moveId1 = moveId.split("_")[1];     // 動かすブロックの列ID
      var blankId0 = blankId.split("_")[0];   // 空きスペースの行ID
      var blankId1 = blankId.split("_")[1];   // 空きスペースの列ID

      var moveFlg = false;    // 判定フラグ
      if (moveId0 == blankId0) {
          if (Math.abs(moveId1-blankId1) == 1) {  // 動かすブロックと空きスペースが隣り合ってる
              moveFlg = true;
          }
      } else if (moveId1 == blankId1) {
          if (Math.abs(moveId0-blankId0) == 1) {  // 動かすブロックと空きスペースが隣り合ってる
              moveFlg = true;
          }
      }
      //** (4-1) end **/
      //** (4-2) start **/
      moveFlg = true //cheat on
      if (moveFlg) {  // (4-2)移動可能な場合、クリックしたブロックを空きスペースに移動させる
          // クリックしたスペースIDと空白スペースIDを入れ替える
          var _moveId = moveId;
          moveId = blankId;
          blankId = _moveId;
          // ブロックの位置を入れ替える
          comp.style.top = comp.height*blankId0+"px";
          comp.style.left  = comp.width*blankId1+"px";
          comp.id = "block"+blankId0+"_"+blankId1;
          move_counter += 1;
          let puzzle_move = document.getElementById("puzzle_move");
          puzzle_move.innerHTML = `${move_counter}回`;
          is_complete()
          if (completed) {
            document.getElementById("puzzle-complete").style.display = "block";
          }
      }
      //** (4-2) end **/
  }


  /**
   * ブロックに画像をセットする
   * @param {String} url   画像のURL
   **/
  function setImage(url) {
      // completed = false;
      if (!completed) {
        document.getElementById("puzzle-complete").style.display = "none";
      }
      if (url == "") {
          alert("URLを入力してください");
          return;
      }

      $("#range_box").css("display","block");     // スライダーバーを表示させる
      $(parentBlock).empty();         // ブロック要素をすべて消す
      $("#url").val("");

      // ブロックIDの格納用配列の初期化
      var blockIdArr = new Array();
      blockIdArr.length = 0;

      /** 2. ブロックの配置方法を決める
      （2-1）パズルのスペースとIDを決め、
      （2-2）空きスペースをランダムに決める
      **/
      //** (2-1～2-2) start **/
      var rnd = Math.floor(Math.random()*((W*H)-1));  //　[空きスペースの位置をランダムに取得] 0～(マス目の数-1)までの整数から、ランダムに数値を取得する
      var counter = 0;
      for (var cnt1=0; cnt1<H; cnt1++) {
          for (var cnt2=0; cnt2<W; cnt2++) {
              // if (counter == rnd) {       // ランダムに取得した値とcounterの値が一致したときに、空きスペースIDをセットする
              //     blankId = "2_2";    // 空きスペースID
              // }
              blockIdArr[counter] = cnt1+"_"+cnt2;
              counter++;
          }
      }
      //** (2-1～2-2) end **/
      // 確率でランダムがそのまま完成だった場合、再度シャッフルする。
      var blockIdArrRandom = blockIdArr.concat();
      blockIdArrRandom = getRandamArray(blockIdArrRandom);   // パズルをランダムに配置するために、ブロック番号を並び替える（2-3）
      function array_equal(blockIdArr, blockIdArrRandom) {
        if (!Array.isArray(blockIdArr))    return false;
        if (!Array.isArray(blockIdArrRandom))    return false;
        if (blockIdArr.length != blockIdArr.length) return false;
        for (var i = 0, n = blockIdArr.length; i < n; ++i) {
          if (blockIdArr[i] !== blockIdArrRandom[i]) return false;
        }
        return true;
      }
      var checkArray = array_equal(blockIdArr, blockIdArrRandom)
      while (checkArray) {
        blockIdArrRandom = getRandamArray(blockIdArrRandom);
        checkArray = array_equal(blockIdArr, blockIdArrRandom);
      };
      blockIdArr = blockIdArrRandom;

      //パズル完成後、クリックしても動けないようにするため
      var counter = 0
      for (var cnt1=0; cnt1<H; cnt1++) {
          for (var cnt2=0; cnt2<W; cnt2++) {
            if (blockIdArr[counter] == `${H-1}_${W-1}`) {
                blankId = cnt1+"_"+cnt2;
            }
            counter++;
          }
      }
      // 画像を読み込ませる(2-3)
      imgObj = new Image();
      imgObj.src = url;
      imgObj.onload = function() {
          var counter = 0;

          // ブロックごとに順番に画像を配置する
          for (var cnt1=0; cnt1<H; cnt1++) {
              for (var cnt2=0; cnt2<W; cnt2++) {
                  if (blankId != cnt1+"_"+cnt2) {
                      //canvas（ブロック）を生成する（※本文中では説明省略）
                      var canvas = document.createElement("canvas");
                      canvas.dataset.imageId = blockIdArr[counter];
                      canvas.id = "block"+cnt1+"_"+cnt2;
                      canvas.width  = parentWidth/W;
                      canvas.height = parentHeight/H;
                      parentBlock.appendChild(canvas);

                      // canvas（ブロック）を配置する（※本文中では説明省略）
                      canvas.style.position = "absolute";
                      canvas.style.width  = parentWidth/W+"px";
                      canvas.style.height = parentHeight/H+"px";
                      canvas.style.top  = canvas.height*cnt1+"px";
                      canvas.style.left = canvas.width*cnt2+"px";

                      /* 3. ブロックをランダムに並び替えて配置する */
                      // IDをもとに、そのブロックに表示される画像の位置・大きさ情報を設定
                      //** (3) start **/
                      var imgDim = imgObj.width/W;
                      if (imgDim > imgObj.height/H) {
                        imgDim = imgObj.height/H;
                      }
                      var rand1 = blockIdArr[counter].split("_")[1];
                      var rand2 =  blockIdArr[counter].split("_")[0];
                    //   var sx = (imgObj.width/W)*rand1;
                    //   var sy = (imgObj.height/H)*rand2;
                      var sx = imgDim*rand1;
                      var sy = imgDim*rand2;
                    //   var sw = imgObj.width/W;
                    //   var sh = imgObj.height/H;
                      var sw = imgDim;
                      var sh = imgDim;
                      var dx = 0;
                      var dy = 0;
                      var dw = canvas.width;
                      var dh = canvas.height;

                      var context = canvas.getContext("2d");
                      context.lineWidth = 1;      // 枠線の太さ
                      // 画像を配置
                      context.drawImage(imgObj,sx,sy,sw,sh,dx,dy,dw,dh);
                      context.beginPath();
                      context.strokeRect(0, 0, dw, dh);
                      canvas.addEventListener("click", clickEv, true);
                      //** (3) end **/
                  }
                  counter++;
              }
          }
          // 小数の影響による外枠の大きさの微調整
          $("#parentBlock").css("width", (canvas.width)*W+"px");
          $("#parentBlock").css("height", (canvas.height)*H+"px");
      }

  }
</script>